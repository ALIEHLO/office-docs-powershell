### YamlMime:PowershellCmdlet
summary: |-
  The Connect-MicrosoftTeams cmdlet connects an authenticated account for use with cmdlets from the MicrosoftTeams module.
module: MicrosoftTeamsPowerShell
notes: ""
syntaxes:
- >-
  Connect-MicrosoftTeams 

  [-TenantId <String>] 

  [-Credential <PSCredential>] 

  [-AccountId <String>]

  [-LogLevel <LogLevel>] 

  [-LogFilePath <String>] 

  [-TeamsEnvironmentName <String>] 

  [-WhatIf] 

  [-Confirm]

  [<CommonParameters>]
- >-
  Connect-MicrosoftTeams 

  [-TenantId <String>] 

  -AccessTokens <String[]>  

  [-LogLevel <LogLevel>] 

  [-LogFilePath <String>] 

  [-WhatIf] 

  [-Confirm] 

  [<CommonParameters>]
examples:
- title: 'Example 1: Connect to MicrosoftTeams'
  code: |-
    Connect-MicrosoftTeams
    Account                 Environment 	Tenant                                TenantId                         
    -------                 -----------  ------------------------------------  ------------------------------------
    user@contoso.com        AzureCloud   xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx  xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
  description: ""
  summary: |+
    This example connects to an Azure account. You must provide a Microsoft account or organizational ID credentials. If multi-factor authentication is enabled for your credentials, you must log in using the interactive option.

- title: 'Example 2: Connect to MicrosoftTeams'
  code: |-
    $credential = Get-Credential
    Connect-MicrosoftTeams -Credential $credential
    Account                 Environment 	Tenant                                TenantId                         
    -------                 -----------  ------------------------------------  ------------------------------------
    user@contoso.com        AzureCloud   xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx  xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
  description: ""
  summary: |+
    The first command prompts for user credentials and stores them in the $Credential variable. The second command connects to an Azure account using the credentials stored in $credential. This account authenticates with Azure using organizational ID credentials.

- title: 'Example 3: Connect to MicrosoftTeams in a specific environment'
  code: |-
    Connect-MicrosoftTeams -TeamsEnvironmentName TeamsGCCH
    Account                 Environment 	Tenant                                TenantId                         
    -------                 -----------  ------------------------------------  ------------------------------------
    user@contoso.com        TeamsGCCH   xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx  xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
  description: ""
  summary: |+
    This example connects to an Azure account in a specific environment. You must provide a Microsoft account or organizational ID credentials. If multi-factor authentication is enabled for your credentials, you must log in using the interactive option.

- title: 'Example 4: Connect to MicrosoftTeams using Accesstokens'
  code: |-
    $tenantid = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
    $clientid = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
    $clientsecret = "..."
    $username = "user@contoso.onmicrosoft.com"
    $password = "..."

    $uri = "https://login.microsoftonline.com/{0}/oauth2/v2.0/token" -f $tenantid
    $body = "client_id={0}&scope=https://graph.microsoft.com/.default&username={1}&password={2}&grant_type=password&client_secret={3}" -f $clientid, $username, [System.Net.WebUtility]::UrlEncode($password), [System.Net.WebUtility]::UrlEncode($clientsecret)
    $graphtoken = Invoke-RestMethod $uri -Body $body -Method Post -ContentType "application/x-www-form-urlencoded" -ErrorAction SilentlyContinue | Select-object -ExpandProperty access_token

    $uri = "https://login.microsoftonline.com/{0}/oauth2/v2.0/token" -f $tenantid
    $body = "client_id={0}&scope=48ac35b8-9aa8-4d74-927d-1f4a14a0b239/.default&username={1}&password={2}&grant_type=password&client_secret={3}" -f $clientid, $username, [System.Net.WebUtility]::UrlEncode($password), [System.Net.WebUtility]::UrlEncode($clientsecret)
    $teamstoken = Invoke-RestMethod $uri -Body $body -Method Post -ContentType "application/x-www-form-urlencoded" -ErrorAction SilentlyContinue | Select-object -ExpandProperty access_token

    Connect-MicrosoftTeams -AccessTokens @($graphtoken, $teamstoken)

    Account                 Environment 	Tenant                                TenantId                         
    -------                 -----------  ------------------------------------  ------------------------------------
    user@contoso.com        AzureCloud   xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx  xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
  description: ""
  summary: |+
    This example demonstrates how to sign in using AccessTokens. Admin can retrieve Access Tokens. It requires two tokens, MS Graph Access Token and Teams Resource token. 

    A delegated flow, such as Resource Owner Password Credentials (ROPC), must be used, with the following delegated app permissions required.

    | API | Grant type | Permission |
    |-|-|-|
    | Microsoft Graph | Delegated | User.Read.All |
    | Microsoft Graph | Delegated | Group.ReadWrite.All |
    | Microsoft Graph | Delegated | AppCatalog.ReadWrite.All |
    | Skype and Teams Tenant Admin API | Delegated | user_impersonation |

parameters:
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: AadAccessToken (Removed from version 2.3.2-preview)
  isRequired: true
  description: |+
    Specifies a Azure Active Directory Graph access token.
    > [!WARNING]
    >This parameter has been removed from version 2.3.2-preview.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" /><span>[</span><span>]</span>
  name: AccessTokens
  isRequired: true
  description: |+
    Specifies a access tokens for "MSGraph" and "Skype and Teams Tenant Admin API" resources. This new parameter is added in version 2.3.2-preview. 

    Following steps must be performed by Tenant Admin in the Azure portal when using your own application. 

    Steps to configure the AAD application. 
    1. Go to Azure portal and go to App Registrations. 
    2. Create or select the existing application.
    3. Add the following permission to this Application. 
    4. Click API permissions. 
    5. Click Add a permission. 
    6. Click on the Microsoft MS Graph, and then select Delegated Permission.
    7. Add the following permissions: "AppCatalog.ReadWrite.All", "Group.ReadWrite.All", "User.Read.All";
    8. Next, we need to add "Skype and Teams Tenant Admin API" resource permission. Click Add a permission.
    9. Navigate to "APIs my organization uses" 
    10. Search for "Skype and Teams Tenant Admin API".
    11. Add all the listed permissions. 
    12. Grant admin consent to both MS Graph and "Skype and Teams Tenant Admin API" name.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: AccountId
  description: |+
    Specifies the ID of an account.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: ApplicationId
  isRequired: true
  description: |+
    Specifies the application ID of the service principal.

    > [!WARNING]
    >This parameter has been removed from the latest versions and replaced by the AccessTokens parameter.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: CertificateThumbprint (Removed from version 2.4.1-preview)
  isRequired: true
  description: |+
    Specifies the certificate thumbprint of a digital public key X.509 certificate of a user account that has permission to perform this action.
    > [!WARNING]
    >This parameter has been removed from version 2.4.1-preview.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: "False"
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="PSCredential" data-throw-if-not-resolved="False" />
  name: Credential
  description: |+
    Specifies a PSCredential object.
    For more information about the PSCredential object, type Get-Help Get-Credential.

    The PSCredential object provides the user ID and password for organizational ID credentials.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Identity
  isRequired: true
  description: |+
    Login using managed service identity in the current environment. This is currently not supported for *-Cs cmdlets. 

  defaultValue: None
  position: Named
  aliases: MSI, ManagedService
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: LogFilePath
  description: |+
    The path where the log file for this PowerShell session is written to.
    Provide a value here if you need to deviate from the default PowerShell log file location.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="LogLevel" data-throw-if-not-resolved="False" />
  name: LogLevel
  description: |+
    Specifies the log level. 
    The acceptable values for this parameter are:

    - Info
    - Error
    - Warning
    - None

    The default value is Info.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: ManagedServiceHostName
  description: |+
    Host name for managed service login.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Int32" data-throw-if-not-resolved="False" />
  name: ManagedServicePort
  description: |+
    Port number for managed service login.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SecureString" data-throw-if-not-resolved="False" />
  name: ManagedServiceSecret
  description: |+
    Secret, used for some kinds of managed service login.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: MsAccessToken (Removed from version 2.3.2-preview)
  description: |+
    Specifies a Microsoft Graph access token.
    > [!WARNING]
    >This parameter has been removed from version 2.3.2-preview.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: TeamsEnvironmentName
  description: |+
    Use this setting if your organization is in one of the Teams Government Cloud environments.

    Specify "TeamsGCCH" if your organization is in the GCC High Environment.  Specify "TeamsDOD" if your organization is in the DoD Environment. 

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: TenantId
  isRequired: true
  description: |+
    Specifies the ID of a tenant.

    If you do not specify this parameter, the account is authenticated with the home tenant.

    You must specify the TenantId parameter to authenticate as a service principal or when using Microsoft account.

  defaultValue: None
  position: Named
  aliases: Domain, TenantDomain
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs.
    The cmdlet is not run.

  defaultValue: "False"
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: MicrosoftTeamsPowerShell.Connect-MicrosoftTeams
name: Connect-MicrosoftTeams
description: |-
  The Connect-MicrosoftTeams cmdlet connects to Microsoft Teams with an authenticated account for use with cmdlets from the MicrosoftTeams PowerShell module. After executing this cmdlet, you can disconnect from MicrosoftTeams account using Disconnect-MicrosoftTeams.

  > [!WARNING]
  >If basic authentication is not enabled, legacy *-Cs cmdlets will not function properly. For Remote PowerShell, basic authentication is necessary.
metadata:
  external help file: Microsoft.Open.Teams.CommonLibrary.dll-Help.xml
  Module Name: MicrosoftTeams
  online version: https://docs.microsoft.com/powershell/module/teams/connect-microsoftteams
  schema: 2.0.0
  author: serdarsoysal
  ms.author: serdars
  ms.reviewer: ""
